name: Create Scratch
on: 
  workflow_dispatch:
      inputs:
        scratch_alias:
          description: Scratch Alias
          required: true
        scratch_email:
          description: Scratch Email
          required: true
        scratch_description:
          description: Scratch Description
        scratch_duration_days:
          description: Scratch Duration Days
          type: number
          default: 30
          required: true
        based_on_snapshot:
          description: Create Scratch Org based on Snapshot 
          required: true
          type: boolean
          default: false
        source_org_id:
          description: Source Org ID
          type: string
        snapshot_name:
          description: Snapshot Name (Max 15 Char)
          type: string
        snapshot_description:
          description: Snapshot Description
          type: string
        
jobs:
  create_scratch:
    name: Create Scratch
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authorize DevHub
        id: auth
        run: |
          echo ${{ secrets.SFDX_AUTHURL_PDEVHUB }} | sf org login sfdx-url --sfdx-url-stdin
          
      - name: Create New Scratch Org
        id: scratch
        if: ${{ steps.auth.outcome == 'success' && github.event.inputs.based_on_snapshot == 'false'}}
        run: |
          sf org create scratch --set-default --definition-file config/project-scratch-def.json --target-dev-hub ${{ secrets.SFDX_USERNAME_PDEVHUB }} --no-namespace --duration-days  ${{ github.event.inputs.scratch_duration_days }}  --wait 30 --description "${{ github.event.inputs.scratch_description }}" --admin-email ${{ github.event.inputs.scratch_email }} --source-org ${{ secrets.SFDX_ORGID_PDEVHUB }} --alias ${{ github.event.inputs.scratch_alias }}
      
      - name: Create New Scratch Org Based on New Snapshot
        id: snapscratch
        if: ${{ steps.auth.outcome == 'success' && github.event.inputs.based_on_snapshot == 'true' && github.event.inputs.source_org_id != '' && github.event.inputs.snapshot_name != '' }}
        run: |
          touch config/project-snapshot-scratch-def.json
          echo '{ "orgName":"${{ github.event.inputs.scratch_alias }}", "snapshot":"${{ github.event.inputs.snapshot_name }}" }' > config/project-snapshot-scratch-def.json
          cat config/project-snapshot-scratch-def.json
          
          sf org create snapshot --source-org ${{ github.event.inputs.source_org_id }} --target-dev-hub ${{ secrets.SFDX_USERNAME_PDEVHUB }} --name ${{ github.event.inputs.snapshot_name }} --description "${{ github.event.inputs.snapshot_description }}"

          #!/bin/bash
          orgGetSnapshotStatus() {
            sf org get snapshot --snapshot ${{ github.event.inputs.snapshot_name }} --target-dev-hub ${{ secrets.SFDX_USERNAME_PDEVHUB }} --json | jq -r '.result.Status'
          }
          while true; do
            getStatus="$(orgGetSnapshotStatus)"
            echo $getStatus
            if [ "$getStatus" == "Active" ]; then
                echo "Snapshot Creation: SUCCESS."
                break
            elif [ "$getStatus" = "Error" | "$getStatus" = "null" ]; then
                echo "Snapshot Creation: FAIL"
                exit 1
            elif [ "$getStatus" = "InProgress" ]; then
                echo "Snapshot Creation: IN PROGRESS"
                sleep 600
            else
                echo "Can't get Snapshot status"
                exit 1
            fi
          done

          sf org create scratch --set-default --definition-file config/project-snapshot-scratch-def.json --target-dev-hub ${{ secrets.SFDX_USERNAME_PDEVHUB }} --no-namespace --duration-days  ${{ github.event.inputs.scratch_duration_days }}  --wait 30 --description "${{ github.event.inputs.scratch_description }}" --admin-email ${{ github.event.inputs.scratch_email }} --alias ${{ github.event.inputs.scratch_alias }}

      - name: Generate Password & Get Scratch Org Info
        id: genpwd
        if: ${{ steps.scratch.outcome == 'success' || steps.snapscratch.outcome == 'success' }}
        run: | 
          sf org generate password --target-org ${{ github.event.inputs.scratch_alias }}
          sf org display user --target-org ${{ github.event.inputs.scratch_alias }} | tee -a scratch-org-info.txt
          sf org logout --all --no-prompt

      - name: Store Scratch Org Information as Artifact
        if: ${{ steps.genpwd.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: Scratch Org Information
          path: scratch-org-info.txt
  
      
        
      
        
